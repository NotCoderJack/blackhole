import org.codehaus.groovy.runtime.GStringImpl

def sshdKeyPath = "${project.buildDir.getAbsolutePath()}/keys"
def toolJarBaseNameLocal = "${project(":application:tool").getName()}-with-dependencies"
ext {
    coreName = project.getName()
    mainVersion = "v1.0.0"
    mainGroup = "teck.geekcity.blackhole"
    javaVersion = 1.8
    mavenRepositoryUrlList = [
            "https://maven.aliyun.com/repository/public",
            "https://maven.aliyun.com/repository/spring",
            "https://maven.aliyun.com/repository/mapr-public",
            "https://maven.aliyun.com/repository/spring-plugin",
            "https://maven.aliyun.com/repository/gradle-plugin",
            "https://maven.aliyun.com/repository/google",
            "https://maven.aliyun.com/repository/jcenter",
    ]
    gitCommitId = { ->
        def headDeafOutputStream = new ByteArrayOutputStream()
        exec {
            commandLine("git", "diff", "HEAD")
            standardOutput = headDeafOutputStream
        }
        def headDeaf = headDeafOutputStream.toString().trim()
        def clean = headDeaf.isEmpty()

        def commitIdOutputStream = new ByteArrayOutputStream()
        exec {
            commandLine("git", "rev-parse", "--short", "HEAD")
            standardOutput = commitIdOutputStream
        }
        return "${commitIdOutputStream.toString().trim()}${clean ? "" : "_dirty"}"
    }
    dockerImageNamePrefix = project.getName()
    constructGroupName = { middleName, projectName ->
        return "${ext.mainGroup}.${middleName}.${projectName} "
    }
    constructVersion = { ->
        return "${ext.mainVersion}_${ext.gitCommitId()}"
    }
    constructDockerImageName = { coreName ->
        return "${ext.dockerImageNamePrefix}_${coreName}:${ext.constructVersion()}"
    }
    jarDependencyVersion = { groupWithArtifact ->
        def slf4jVersion = "1.7.15"
        def jacksonVersion = "2.9.8"
        def grpcVersion = "1.30.1"
        def dockerJavaVersion = "3.2.7"
        def junitJupiterVersion = "5.3.1"
        def minaSshVersion = "2.5.1"
        def logbackVersion = "1.2.3"
        versionMapping = [
                "org.inferred:freebuilder"                                : "2.6.1",
                "com.google.code.findbugs:jsr305"                         : "3.0.2",
                "com.google.guava:guava"                                  : "29.0-jre",
                "org.apache.commons:commons-lang3"                        : "3.0",
                "org.slf4j:slf4j-api"                                     : slf4jVersion,
                "org.slf4j:slf4j-simple"                                  : slf4jVersion,
                "org.freemarker:freemarker"                               : "2.3.9",
                "info.picocli:picocli"                                    : "4.5.0",
                "commons-io:commons-io"                                   : "2.4",
                "org.apache.commons:commons-exec"                         : "1.3",
                "mysql:mysql-connector-java"                              : "8.0.21",
                "com.h2database:h2"                                       : "1.4.195",
                "com.fasterxml.jackson.core:jackson-core"                 : jacksonVersion,
                "com.fasterxml.jackson.core:jackson-databind"             : jacksonVersion,
                "com.fasterxml.jackson.core:jackson-annotations"          : jacksonVersion,
                "ch.qos.logback:logback-core"                             : logbackVersion,
                "ch.qos.logback:logback-classic"                          : logbackVersion,
                "io.grpc:grpc-api"                                        : grpcVersion,
                "io.grpc:grpc-core"                                       : grpcVersion,
                "io.grpc:grpc-netty-shaded"                               : grpcVersion,
                "io.grpc:grpc-protobuf"                                   : grpcVersion,
                "io.grpc:grpc-stub"                                       : grpcVersion,
                "io.grpc:grpc-testing"                                    : grpcVersion,
                "io.grpc:protoc-gen-grpc-java"                            : grpcVersion,
                "com.google.protobuf:protoc"                              : "3.12.0",
                "org.apache.tomcat:annotations-api"                       : "6.0.53",
                "com.github.docker-java:docker-java-core"                 : dockerJavaVersion,
                "com.github.docker-java:docker-java-transport-httpclient5": dockerJavaVersion,
                "org.junit.jupiter:junit-jupiter-api"                     : junitJupiterVersion,
                "org.junit.jupiter:junit-jupiter-engine"                  : junitJupiterVersion,
                "org.apache.sshd:sshd-core"                               : minaSshVersion,
                "org.apache.sshd:sshd-scp"                                : minaSshVersion,
        ]
        def version = versionMapping[groupWithArtifact]
        if (!version) {
            throw new RuntimeException("version not found for \"${groupWithArtifact}\"")
        }
        return version
    }
    jarDependency = { group, artifact ->
        String groupWithArtifact = "${group}:${artifact}"
        return "${groupWithArtifact}:${ext.jarDependencyVersion(groupWithArtifact)}"
    }
    keyPairFilePath = "${sshdKeyPath}/id_rsa.key.pair" as GStringImpl
    idRsaFile = "${sshdKeyPath}/id_rsa" as GStringImpl
    idRsaPubFile = "${sshdKeyPath}/id_rsa.pub" as GStringImpl
    toolJarBaseName = toolJarBaseNameLocal as GStringImpl
    toolJarPath = "${project(":application:tool").buildDir.getAbsolutePath()}/libs/" +
            "${toolJarBaseNameLocal}-${project.rootProject.constructVersion()}.jar" as GStringImpl
    k8sNameSpace = "default"
    nfsProvisionerName = "${ext.coreName}-nfs-provisioner" as GStringImpl
    pvcTemplateFile = project(":application:nfs_storage_provision").file("k8s/nfs_storage_class_and_pvc.yaml").getAbsolutePath()
}
