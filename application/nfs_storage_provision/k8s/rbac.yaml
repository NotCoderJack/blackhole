apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${nfs_provisioner_service_account_name}
  namespace: ${namespace}

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ${nfs_provisioner_cluster_role_name}
rules:
  - apiGroups: [ "" ]
    resources: [ "persistentvolumes" ]
    verbs: [ "get", "list", "watch", "create", "delete" ]
  - apiGroups: [ "" ]
    resources: [ "persistentvolumeclaims" ]
    verbs: [ "get", "list", "watch", "update" ]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "storageclasses" ]
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "" ]
    resources: [ "events" ]
    verbs: [ "create", "update", "patch" ]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${nfs_provisioner_cluster_role_binding_name}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ${nfs_provisioner_cluster_role_name}
subjects:
  - kind: ServiceAccount
    name: ${nfs_provisioner_service_account_name}
    namespace: ${namespace}

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ${nfs_provisioner_role_name}
  namespace: ${namespace}
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ${nfs_provisioner_role_binding_name}
  namespace: ${namespace}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ${nfs_provisioner_role_name}
subjects:
  - kind: ServiceAccount
    name: ${nfs_provisioner_service_account_name}
    namespace: ${namespace}