buildscript {
    repositories {
        for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
            maven { url(mavenRepositoryUrl) }
        }
    }
}
plugins {
    id project.rootProject.ext.jarDependencyVersion("org.inferred.processors", "")
    id "org.springframework.boot" version project.rootProject.ext.jarDependencyVersion("org.springframework.boot", "")
    id "io.spring.dependency-management" version project.rootProject.ext.jarDependencyVersion("io.spring.dependency-management", "")
    id "java"
}

group = project.rootProject.ext.constructGroupName("application", project.getName())
version = project.rootProject.constructVersion()
sourceCompatibility = project.rootProject.ext.javaVersion
targetCompatibility = project.rootProject.ext.javaVersion

repositories.clear()
repositories.addAll(buildscript.repositories)

dependencies {
    implementation(project(":lib:core"))
    implementation(project(":lib:render"))
    processor(project.rootProject.ext.jarDependency("org.inferred", "freebuilder"))
    implementation(project.rootProject.ext.jarDependency("com.google.guava", "guava"))
    implementation(project.rootProject.ext.jarDependency("org.apache.commons", "commons-lang3"))
    implementation(project.rootProject.ext.jarDependency("org.freemarker", "freemarker"))
    implementation(project.rootProject.ext.jarDependency("junit", "junit"))
    implementation("org.springframework.boot:spring-boot-starter-web")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
}

test {
    useJUnit()
}

task runJar(type: Exec) {
    executable("java")
    args(
            String.format("-Dspring.config.location=%s", project.file("application.yaml")),
            "-jar", project.file(String.format("build/libs/%s-%s.jar", project.getName(), project.getVersion())),
            project.file("template"),
    )
    doFirst {
        println(String.format("running command: %s", String.join(" ", getCommandLine())))
    }
    dependsOn(bootJar)
}