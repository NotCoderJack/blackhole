buildscript {
    repositories {
        for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
            maven { url(mavenRepositoryUrl) }
        }
    }
}
plugins {
    id "org.inferred.processors" version "3.3.0"
    id "java"
}

group = project.rootProject.ext.constructGroupName("application", project.getName())
version = project.rootProject.constructVersion()
sourceCompatibility = project.rootProject.ext.javaVersion
targetCompatibility = project.rootProject.ext.javaVersion

repositories {
    for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
        maven { url(mavenRepositoryUrl) }
    }
}

dependencies {
    implementation(project.rootProject.project("lib:core"))
    implementation(project.rootProject.project("lib:agent"))
    implementation(project.rootProject.project("lib:ssh"))
    processor(project.rootProject.ext.jarDependency("org.inferred", "freebuilder"))
    implementation(project.rootProject.ext.jarDependency("com.google.guava", "guava"))
    implementation(project.rootProject.ext.jarDependency("org.apache.commons", "commons-lang3"))
    implementation(project.rootProject.ext.jarDependency("org.slf4j", "slf4j-api"))
    implementation(project.rootProject.ext.jarDependency("org.freemarker", "freemarker"))
    implementation(project.rootProject.ext.jarDependency("info.picocli", "picocli"))
    implementation(project.rootProject.ext.jarDependency("commons-io", "commons-io"))
    // TODO use logback
    implementation(project.rootProject.ext.jarDependency("org.slf4j", "slf4j-simple"))
    implementation(project.rootProject.ext.jarDependency("junit", "junit"))
    testImplementation(project.rootProject.ext.jarDependency("org.slf4j", "slf4j-simple"))
}
test {
    useJUnit()
}
def jarBaseName = "${project.getName()}-with-dependencies"
jar {
    manifest {
        attributes(
                'Implementation-Title': 'blackhole.application.tool',
                'Implementation-Version': project.getVersion(),
                'Main-Class': 'tech.geekcity.blackhole.application.tool.EntryPoint'
        )
    }
    setArchivesBaseName(jarBaseName)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def toolJarName = "${jarBaseName}-${project.getVersion()}.jar"
def toolJar = project.file("${project.buildDir.getAbsolutePath()}/libs/${toolJarName}")
def sshdPort = 2222
task generateRsaKeyFiles(type: Exec) {
    commandLine(
            "java",
            "-jar", toolJar,
            "tech.geekcity.blackhole.application.tool.RsaKeyGenerator",
            "--idRsaFile", project.rootProject.ext.idRsaFile,
            "--idRsaPubFile", project.rootProject.ext.idRsaPubFile,
            "--keyPairFile", project.rootProject.ext.keyPairFilePath,
            // "--existsDoNothing", "false"
            // "--overwrite",
    )
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    dependsOn(jar)
}
task copyToolJarToRemote(type: Exec) {
    executable("java")
    args(
            "-jar", toolJar,
            "tech.geekcity.blackhole.application.tool.RemoteFileTransfer",
            "--username", "root",
            "--remoteHost", "localhost",
            "--remotePort", sshdPort,
            "--keyPairFile", keyPairFilePath,
            "--transferType", "upload",
            "--localFile", toolJar,
            "--remoteFile", "/tmp/${toolJar.getName()}",
    )
    doFirst {
        println(String.format("running command: %s", String.join(" ", getCommandLine())))
    }
    dependsOn(assemble)
}
