buildscript {
    repositories aliyun_repositories
}
plugins {
    id "org.inferred.processors" version "3.3.0"
    id "java"
}

group = String.format("%s.%s", project.main_group, project.getName())
version = project.main_version
sourceCompatibility = project.java_version
targetCompatibility = project.java_version

repositories.clear()
repositories.addAll(buildscript.repositories)

def slf4jVersion = "1.7.15"
dependencies {
    implementation(project(":core"))
    implementation(project(":agent"))
    implementation(project(":ssh"))
    processor "org.inferred:freebuilder:2.6.1"
    implementation("com.google.guava:guava:29.0-jre")
    implementation("org.apache.commons:commons-lang3:3.0")
    implementation("org.slf4j:slf4j-api:${slf4jVersion}")
    implementation("org.freemarker:freemarker:2.3.9")
    implementation("info.picocli:picocli:4.5.0")
    implementation("commons-io:commons-io:2.4")
    // TODO use logback
    implementation("org.slf4j:slf4j-simple:${slf4jVersion}")
    testImplementation("junit:junit:4.12")
    testImplementation("org.slf4j:slf4j-simple:${slf4jVersion}")
}
test {
    useJUnit()
}
def jarName = "${project.getName()}-with-dependencies"
jar {
    manifest {
        attributes(
                'Implementation-Title': 'blackhole.dist',
                'Implementation-Version': project.getVersion(),
                'Main-Class': 'tech.geekcity.blackhole.dist.EntryPoint'
        )
    }
    setArchivesBaseName(jarName)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task runAgent(type: Exec) {
    executable("java")
    args(
            "-jar", project.file(String.format("build/libs/%s-${project.getVersion()}.jar", jarName)),
            "--port", 8888,
    )
    doFirst {
        println(String.format("running command: %s", String.join(" ", getCommandLine())))
    }
}

// ********************** build docker images **********************
def httpProxy = java.util.Optional.ofNullable(System.getenv("http_proxy")).orElse("")
def httpsProxy = java.util.Optional.ofNullable(System.getenv("https_proxy")).orElse("")
def baseImageName = "blackhole_base:${project.getVersion()}"
task buildBaseDim(type: Exec) {
    executable("docker")
    args(
            "build", "${project.file("dim/base")}",
            "-f", "${project.file("dim/base/base.centos.dockerfile")}",
            "--build-arg", "http_proxy=${httpProxy}",
            "--build-arg", "https_proxy=${httpsProxy}",
            "-t", baseImageName,
    )
    doFirst {
        println(String.format("running command: %s", String.join(" ", getCommandLine())))
    }
}
def sshdImageName = "blackhole_sshd:${project.getVersion()}"
task buildSshdDim(type: Exec) {
    executable("docker")
    args(
            "build", "${project.file("dim/base")}",
            "-f", "${project.file("dim/sshd/sshd.dockerfile")}",
            "--build-arg", "http_proxy=${httpProxy}",
            "--build-arg", "https_proxy=${httpsProxy}",
            "--build-arg", "BASE_IMAGE=${baseImageName}",
            "-t", sshdImageName,
    )
    doFirst {
        println(String.format("running command: %s", String.join(" ", getCommandLine())))
    }
    doLast {
        def sshdDockerName = "sshd_server"
        def sshdPort = "2222"
        println("run sshd docker image: docker run --rm -p ${sshdPort}:22 --name ${sshdDockerName} -d blackhole_sshd:v1.0.0")
        println("access with ssh client: ssh -i ${project.file("dim/sshd/id_rsa")} -p ${sshdPort} root@localhost")
        println("stop sshd docker image: docker kill ${sshdDockerName}")
    }
    dependsOn(buildBaseDim)
}